package org.sehkah.ddon.tools.extractor.common.logic.resource.entity.ui.meta;

import java.util.Arrays;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

public enum MsgGroupType {
    MSG_GROUP_TYPE_NONE(0x0),
    MSG_GROUP_TYPE_NORMAL(0x0),
    MSG_GROUP_TYPE_GREETING_NORMAL(0x1),
    MSG_GROUP_TYPE_EX_TALK(0x3),
    MSG_GROUP_TYPE_AM_RANK_UP_HIGH(0xD),
    MSG_GROUP_TYPE_AM_RANK_UP_MIDDLE(0xE),
    MSG_GROUP_TYPE_AM_RANK_UP_LOW(0xF),
    MSG_GROUP_TYPE_AM_PROVIDE_LOW(0x11),
    MSG_GROUP_TYPE_AM_PROVIDE_MIDDLE(0x12),
    MSG_GROUP_TYPE_AM_PROVIDE_HIGH(0x13),
    MSG_GROUP_TYPE_JM_OPEN_JOB(0x15),
    MSG_GROUP_TYPE_JM_SKILL_NORMAL(0x16),
    MSG_GROUP_TYPE_JM_SKILL_HIGH(0x17),
    MSG_GROUP_TYPE_NORA_PAWN(0x19),
    MSG_GROUP_TYPE_PAWN_CRAFT_WAIT(0x1A),
    MSG_GROUP_TYPE_PAWN_CRAFT_WORK(0x1D),
    MSG_GROUP_TYPE_PAWN_RESCUE(0x1B),
    MSG_GROUP_TYPE_PAWN_UNION(0x1C),
    MSG_GROUP_TYPE_INN(0x1F),
    MSG_GROUP_TYPE_INN_FREE(0x20),
    MSG_GROUP_TYPE_REV_POSSIBLE(0x21),
    MSG_GROUP_TYPE_REV_INVALID_CHARGE(0x22),
    MSG_GROUP_TYPE_REV_1TIME_1DAY(0x23),
    MSG_GROUP_TYPE_REV_CHECK_REMAIN(0x24),
    MSG_GROUP_TYPE_REV_FINAL(0x25),
    MSG_GROUP_TYPE_STAMP_REWARD_ACCUMULATE(0x26),
    MSG_GROUP_TYPE_STAMP_REWARD_TODAY(0x27),
    MSG_GROUP_TYPE_STAMP_REWARD_END(0x28),
    MSG_GROUP_TYPE_AM_INTRO(0x2A),
    MSG_GROUP_TYPE_JM_INTRO(0x2B),
    MSG_GROUP_TYPE_JM_FIRST_TALK(0x2C),
    MSG_GROUP_TYPE_JM_LEVEL_UP(0x2E),
    MSG_GROUP_TYPE_GET_REWARD(0x2F),
    MSG_GROUP_TYPE_GET_SECRET_ABILITY(0x30),
    MSG_GROUP_TYPE_RECOVER_WEAK_PRICE(0x31),
    MSG_GROUP_TYPE_RECOVER_WEAK_UNNECESSARY(0x32),
    MSG_GROUP_TYPE_GET_REWARD_END(0x36),
    MSG_GROUP_TYPE_REVIVE_PAWN_FAILED(0x37),
    MSG_GROUP_TYPE_REVIVE_PAWN_SUCCESS(0x38),
    MSG_GROUP_TYPE_POWER_UP_SELECT(0x39),
    MSG_GROUP_TYPE_SALON_INTRO(0x3A),
    MSG_GROUP_TYPE_CRAFT_BLOCK(0x3B),
    MSG_GROUP_TYPE_INTERVAL_TALK(0x3C),
    MSG_GROUP_TYPE_REGISTERD_ENTRY_TALK(0x3D),
    MSG_GROUP_TYPE_JM_TUTO_ORDER(0x3E),
    MSG_GROUP_TYPE_REWARD_NOTHING(0x42),
    MSG_GROUP_TYPE_APPRAISE_INTRO(0x43),
    MSG_GROUP_TYPE_PW_EXPEDITION_NO_RELEASE(0x44),
    MSG_GROUP_TYPE_PW_EXPEDITION_NO_WAIT(0x45),
    MSG_GROUP_TYPE_PW_EXPEDITION_SALLY(0x46),
    MSG_GROUP_TYPE_PW_EXPEDITION_SALLY_NO_COST(0x47),
    MSG_GROUP_TYPE_PW_EXPEDITION_LETS_GO(0x48),
    MSG_GROUP_TYPE_PW_EXPEDITION_NO_EMPTY(0x49),
    MSG_GROUP_TYPE_PW_EXPEDITION_REPORT(0x4A),
    MSG_GROUP_TYPE_PW_EXPEDITION_REPORT_HOT_SPOT(0x4B),
    MSG_GROUP_TYPE_PW_EXPEDITION_NOTI_REWARD(0x4C),
    MSG_GROUP_TYPE_PW_EXPEDITION_REPORT_FAILED(0x4E),
    MSG_GROUP_TYPE_CLAN_BASE_RELEASE(0x4D),
    MSG_GROUP_TYPE_CLAN_DUNGEON_NO_LIST(0x4F);

    private static final Map<Integer, MsgGroupType> ordinalMap = Arrays.stream(values()).collect(Collectors.toMap(MsgGroupType::ordinal, Function.identity()));
    public final long value;

    MsgGroupType(long value) {
        this.value = value;
    }

    public static MsgGroupType of(Integer n) {
        return ordinalMap.get(n);
    }
}
