pluginManagement {
    plugins {
        id 'org.beryx.jlink' version '3.1.4-rc'
        id 'io.freefair.lombok' version '9.0.0'
        id 'com.github.ben-manes.versions' version '0.52.0'
        id 'me.champeau.jmh' version '0.7.3'
    }
}

dependencyResolutionManagement {
    versionCatalogs {
        common {
            version('junit', '5.12.0')
        }
        log {
            version('orgSlf4j', '2.0.17')
            version('orgApacheLoggingLog4j', '2.25.2')

            // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
            library('slf4j-api', 'org.slf4j', 'slf4j-api').versionRef('orgSlf4j')
            // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
            library('log4j-api', 'org.apache.logging.log4j', 'log4j-api').versionRef('orgApacheLoggingLog4j')
            // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
            library('log4j-core', 'org.apache.logging.log4j', 'log4j-core').versionRef('orgApacheLoggingLog4j')
            // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j2-impl
            library('log4j-slf4j2-impl', 'org.apache.logging.log4j', 'log4j-slf4j2-impl').versionRef('orgApacheLoggingLog4j')

            bundle('logging-implementation', ['slf4j-api', 'log4j-api'])
            bundle('logging-runtimeOnly', ['log4j-core', 'log4j-slf4j2-impl'])
        }
        lib {
            version('comFasterxmlJackson', '2.20.0')
            version('orgBouncycastle', '1.82')
            version('orgApacheCommons', '3.19.0')

            // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
            library('jackson-dataformat-yaml', 'com.fasterxml.jackson.dataformat', 'jackson-dataformat-yaml').versionRef('comFasterxmlJackson')
            // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-csv
            library('jackson-dataformat-csv', 'com.fasterxml.jackson.dataformat', 'jackson-dataformat-csv').versionRef('comFasterxmlJackson')
            // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
            library('jackson-databind', 'com.fasterxml.jackson.core', 'jackson-databind').versionRef('comFasterxmlJackson')
            // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
            library('jackson-core', 'com.fasterxml.jackson.core', 'jackson-core').versionRef('comFasterxmlJackson')
            // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk18on
            library('bcprov-jdk18on', 'org.bouncycastle', 'bcprov-jdk18on').versionRef('orgBouncycastle')
            // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
            library('commons-lang3', 'org.apache.commons', 'commons-lang3').versionRef('orgApacheCommons')
        }
        libTest {
            version('commonsCodec', '1.19.0')
            version('commonsIo', '2.18.0')
            version('junitPioneer', '2.3.0')
            version('mockitoCore', '5.20.0')

            // https://mvnrepository.com/artifact/commons-codec/commons-codec
            library('commons-codec', 'commons-codec', 'commons-codec').versionRef('commonsCodec')
            // https://mvnrepository.com/artifact/commons-io/commons-io
            library('commons-io', 'commons-io', 'commons-io').versionRef('commonsIo')
            // https://mvnrepository.com/artifact/org.junit-pioneer/junit-pioneer
            library('junit-pioneer', 'org.junit-pioneer', 'junit-pioneer').versionRef('junitPioneer')
            // https://mvnrepository.com/artifact/org.mockito/mockito-core
            library('mockito-core', 'org.mockito', 'mockito-core').versionRef('mockitoCore')
        }
        cli {
            version('commonsCodec', '1.19.0')
            version('comFasterxmlJackson', '2.20.0')
            version('infoPicocli', '4.7.7')

            // https://mvnrepository.com/artifact/commons-codec/commons-codec
            library('commons-codec', 'commons-codec', 'commons-codec').versionRef('commonsCodec')
            // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
            library('jackson-dataformat-yaml', 'com.fasterxml.jackson.dataformat', 'jackson-dataformat-yaml').versionRef('comFasterxmlJackson')
            // https://mvnrepository.com/artifact/info.picocli/picocli
            library('picocli', 'info.picocli', 'picocli').versionRef('infoPicocli')
        }
    }
}

dependencyResolutionManagement {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

rootProject.name = 'ddon-extractor'

String[] publishableModules = [
        'lib-api',
        'lib-common',
        'lib-season1',
        'lib-season2',
        'lib-season3'
]

String[] modules = [
        'cli',
        'lib-test'
]

include (modules+publishableModules)

gradle.lifecycle.afterProject {
    if (it.name != rootProject.name) {
        apply plugin: 'com.github.ben-manes.versions'
        apply plugin: 'jacoco'
        apply plugin: 'io.freefair.lombok'

        lombok {
            version = '1.18.42'
        }

        java {
            toolchain.languageVersion.set(JavaLanguageVersion.of(sourceCompatibility.toString()))
            withJavadocJar()
            withSourcesJar()
            modularity.inferModulePath = true
        }

        testing {
            suites {
                test {
                    useJUnitJupiter(common.versions.junit)
                }
            }
        }

        dependencies {
            implementation log.bundles.logging.implementation
            runtimeOnly log.bundles.logging.runtimeOnly
        }

        tasks.withType(Javadoc).configureEach { t ->
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addBooleanOption('html5', true)
            source = sourceSets.main.allJava
            classpath = configurations.compileClasspath
            failOnError = false
        }

        if (publishableModules.contains(it.name)) {
            apply plugin: 'maven-publish'

            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        artifactId = rootProject.name + '-' + project.name

                        from components.java

                        versionMapping {
                            usage('java-api') {
                                fromResolutionOf('runtimeClasspath')
                            }
                            usage('java-runtime') {
                                fromResolutionResult()
                            }
                        }

                        pom {
                            name = rootProject.name + '-' + project.name
                            description = 'ddon-extractor libraries'
                            url = 'https://github.com/ddon-research/ddon-extractor'

                            licenses {
                                license {
                                    name = 'GNU Affero General Public License v3.0'
                                    url = 'https://www.gnu.org/licenses/agpl-3.0.en.html'
                                }
                            }

                            developers {
                                developer {
                                    id = 'sehkah'
                                }
                            }

                            scm {
                                connection = 'scm:git:https://github.com/ddon-research/ddon-extractor.git'
                                developerConnection = 'scm:git:https://github.com/ddon-research/ddon-extractor.git'
                                url = 'https://github.com/ddon-research/ddon-extractor/tree/main'
                            }
                        }
                    }
                }
                repositories {
                    maven {
                        def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
                        def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    }
                }
            }
        }
    }
}

gradle.lifecycle.beforeProject {
    if (it.name != rootProject.name) {
        tasks.withType(JavaCompile).configureEach {
            options.fork = true
            options.incremental = true
            options.encoding = 'UTF-8'
            modularity.inferModulePath = true
        }
    }
}
